<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>

  <arg name="agent"        default="scarab40"/>
  <arg name="rviz"         default="true"/>
  <arg name="ground_truth" default="true"/> <!-- publish ground truth tf tree -->

  <!-- gazebo args -->
  <arg name="world_name"  default="$(find scarab_gazebo)/worlds/perch.world"/>
  <arg name="verbose"     default="false"/>
  <arg name="debug"       default="false"/>
  <arg name="gazebo_gui"  default="true"/>

  <!-- tf args -->
  <arg name="base_frame"    default="base_footprint" />
  <arg name="odom_frame"    default="$(arg agent)/odom" />
  <arg name="map_frame"     default="$(arg agent)/map" />
  <arg name="world_frame"   default="world"/>
  <arg name="publish_world" default="true"/>

  <!-- start gazebo -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"   value="$(arg world_name)"/>
    <arg name="gui"          value="$(arg gazebo_gui)"/>
    <arg name="debug"        value="$(arg debug)"/>
    <arg name="verbose"      value="$(arg verbose)"/>
    <arg name="paused"       value="false"/>
    <arg name="use_sim_time" value="true"/>
  </include>

  <!-- start rviz -->
  <node name="rviz" pkg="rviz" type="rviz"
        args="-d $(find scarab)/rviz/$(arg agent)_sim.rviz"/>

  <!-- publish static transform between world_frame and map_frame -->
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="world_static_tf_broadcaster"
        args="0 0 0 0 0 0 $(arg world_frame) $(arg map_frame)"
        if="$(arg publish_world)"/>

  <!-- publish static transform between world_frame and map_frame -->
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="odom_static_tf_broadcaster"
        args="0 0 0 0 0 0 $(arg odom_frame) ground_truth/odom"
        if="$(arg ground_truth)"/>

  <!-- publish static transform between world_frame and map_frame -->
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="base_static_tf_broadcaster"
        args="0 0 0 0 0 0 ground_truth/base_link $(arg base_frame)"
        if="$(arg ground_truth)"/>

  <!-- load perch world -->
  <node name="perch_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
        args="-sdf -model perch -file $(find scarab_gazebo)/models/perch/model.sdf"/>

  <group ns="$(arg agent)">

    <!-- load robot urdf to param -->
    <param name="robot_description"
           command="$(find xacro)/xacro '$(find scarab_description)/urdf/scarab.xacro'" />

    <!-- spawn robot in gazebo -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-urdf -model $(arg agent) -param /$(arg agent)/robot_description -x 0 -y 0 -z 2"/>

    <!-- hack to get laser frame correct -->
    <node pkg="tf2_ros"
          type="static_transform_publisher"
          name="base_static_tf_broadcaster"
          args="0 0 0 0 0 0 laser $(arg agent)/laser"/>

    <!-- publish gazebo model joint states to tf -->
    <node name="robot_state_publisher"
          pkg="robot_state_publisher"
          type="robot_state_publisher"/>
    <node name="joint_state_publisher"
          pkg="joint_state_publisher"
          type="joint_state_publisher"/>

    <!-- ground truth pose -->
    <node name="pose_stamped" pkg="hfn" type="tf_posestamped_node.py" >
      <param name="base_frame_id" value="$(arg base_frame)" />
      <param name="map_frame_id"  value="$(arg map_frame)" />
    </node>

    <!-- convert rviz goal msg to action -->
    <node name="goal_to_action" pkg="hfn" type="goal_to_action.py">
      <remap from="goal" to="move_base_simple/goal"/>
    </node>

    <!-- navigation via hfn -->
    <node name="hfn_navigation" pkg="hfn" type="hfn" output="screen">
      <remap from="odom" to="ground_truth/odom"/>
      <param name="base_frame_id"      value="$(arg base_frame)"/>
      <param name="map_frame_id"       value="$(arg map_frame)" />
      <param name="cost_occ_prob"      value="0.7" />
      <param name="cost_occ_dist"      value="0.7" />
      <param name="max_occ_dist"       value="1.0" />
      <param name="lethal_occ_dist"    value="0.2" />
      <param name="axle_width"         value="0.255" />
      <param name="robot_radius"       value="0.3" />
      <param name="safety_margin"      value="0.1" />
      <param name="social_margin"      value="0.2" />
      <param name="goal_tolerance_ang" value=".05"/> <!--default 2pi-->
      <param name="goal_tolerance"     value=".05"/>     <!--default .2m-->
    </node>

    <!-- slam for localization -->
    <node pkg="gmapping" type="slam_gmapping" name="gmapping" output="screen">
      <remap from="map_metadata" to="map_metadata"/>

      <param name="base_frame" value="$(arg base_frame)" />
      <param name="odom_frame" value="$(arg odom_frame)"/>
      <param name="map_frame"  value="$(arg map_frame)" />
    </node>

  </group>

</launch>
